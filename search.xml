<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu18.04编译VASP5.4.4+VTST的详细步骤]]></title>
    <url>%2F2019%2F10%2F19%2FUbuntu18.04_VASP5.4.4-VTST%2F</url>
    <content type="text"><![CDATA[本文直接使用较新版本的 Intel® Parallel Studio XE 工具集进行编译，无需辅助的 fftw 和 openmpi 本文主要参考 【VASP】给真·小白看的VASP本地编译自学指南 Ver 2.1 和 VASP+VTST编译安装 所用安装包为 parallel_studio_xe_2019_update1_cluster_edition.tgz , vasp.5.4.4.tar.gz , vtstcode.tgz 和 vtstscripts.tgz 编译环境准备前期准备更新软件并安装一些必备库1234567sudo apt-get update # 更新软件包的源地址sudo apt-get upgrade # 升级已安装的所有软件包sudo apt-get install build-essentialsudo apt-get install libstdc++5sudo apt-get install openjdk-8-jresudo apt-get install g++sudo apt-get install gcc 安装Intel编译环境解压安装包1tar –xvzf parallel_studio_xe_2019_update1_cluster_edition.tgz 进入安装包目录进行安装1./install.sh 空格+回车，按照默认操作进行，安装完成程序自动退出 设置环境变量在主文件夹 home 中按ctrl+h，显示隐藏文件夹，打开 .bashrc ，在其末尾添加（注意安装后的 intel 目录，有的是 /opt/intel ） 12source /home/cyh/intel/bin/compilervars.sh intel64 # 启用intel编译器source /home/cyh/intel/mkl/bin/mklvars.sh intel64 # 启用mkl编译器 退出并保存 .bashrc 。再使其生效 1source ~/.bashrc 检查是否编译成功 1234which ifortwhich iccwhich mpiecho $MKLROOT 显示路径即编译成功 编译Intel fftw3进入 intel 目录中的 fftw3xf 文件夹内 /home/cyh/intel/mkl/interfaces/fftw3xf 1make libintel64 生成 libfftw3.intel.a 编译 VASP+VTST解压 VASP 安装包1tar –xvzf vasp.5.4.4.tar.gz 将解压后的 vasp.5.4.4 文件夹移动到 home 文件夹中 解压 vtstcode 安装包1tar –xvzf vtstcode.tar.gz 生成 vtstcode-178 文件夹 设置 VTST将 vtstcode-178 文件夹目录下所有文件复制到 /home/vasp.5.4.4/src/ 中（替换 chain.F ） 打开并修改 src 文件夹中的 main.F ，将 12CALL CHAIN_FORCE(T_INFO%NIONS,DYN%POSION,TOTEN,TIFOR, &amp; LATT_CUR%A,LATT_CUR%B,IO%IU6) 替换为 12CALL CHAIN_FORCE(T_INFO%NIONS,DYN%POSION,TOTEN,TIFOR, &amp; TSIF,LATT_CUR%A,LATT_CUR%B,IO%IU6) 打开并修改 src 文件夹中的 .objects ，在 chain.o （第一个，约第70行）前添加以下内容 12bfgs.o dynmat.o instanton.o lbfgs.o sd.o cg.o dimer.o bbm.o \fire.o lanczos.o neb.o qm.o opt.o \ 注意 \ 后不要有空格 获取 makefile 文件进入 /home/vasp.5.4.4/arch ,复制 makefile.include.linux_intel 到上一级目录 /home/vasp.5.4.4 中，并重命名为 makefile.include 修改 makefile 文件添加 MKLROOT 路径获取 MKLROOT 路径 1echo $MKLROOT 将所得路径添加到 MKL_PATH 前 12MKLROOT = /home/cyh/intel/compilers_and_libraries_2019.0.117/linux/mklMKL_PATH = $(MKLROOT)/lib/intel64 修改数学库配置将 MKL_PATH 后的 1234BLAS =LAPACK =BLACS = -lmkl_blacs_intelmpi_lp64SCALAPACK = $(MKL_PATH)/libmkl_scalapack_lp64.a $(BLACS) 修改为 1234BLAS = -L$(MKL_PATH) -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthreadLAPACK = -L$(MKL_PATH) -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthreadBLACS = -L$(MKL_PATH) -lmkl_blacs_intelmpi_lp64SCALAPACK = $(MKL_PATH)/libmkl_scalapack_lp64.a $(BLACS) 修改 OBJECTS进入 intel 目录中的 fftw3xf 文件夹内，将之前生成的 libfftw3.intel.a 路径添加到 OBJECTS 中 1234OBJECTS = fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.o\/home/cyh/intel/mkl/interfaces/fftw3xf/libfftw3xf_intel.aINCS =-I$(MKLROOT)/include/fftw 保存并退出 makefile.include 获取管理员权限在 /home/vasp.5.4.4 中打开终端 1su 确认环境变量12source /home/cyh/intel/bin/compilervars.sh intel64source /home/cyh/intel/mkl/bin/mklvars.sh intel64 进行编译12make verycleanmake all 编译完成后在 /home/vasp.5.4.4/bin 中生成 vasp_gam, vasp_ncl 和 vasp_std 添加 vtstscripts解压 vtstscripts 安装包 1tar –xvzf vtstscripts.tgz 将生成的 vtstscripts-940 文件夹移动到 /home/vasp.5.4.4/ 中 添加环境变量打开 .bashrc ，在其末尾添加 12export PATH=/home/cyh/vasp.5.4.4/bin:$PATHexport PATH=/home/cyh/vasp.5.4.4/vtstscripts-940:$PATH 退出并保存 .bashrc 。再使其生效 1source ~/.bashrc]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu18.04编译VASP5.4.4的详细步骤]]></title>
    <url>%2F2019%2F10%2F18%2FUbuntu18.04_VASP5.4.4%2F</url>
    <content type="text"><![CDATA[本文直接使用较新版本的 Intel® Parallel Studio XE 工具集进行编译，无需辅助的 fftw 和 openmpi 本文主要参考【VASP】给真·小白看的VASP本地编译自学指南 Ver 2.1 所用安装包为 parallel_studio_xe_2019_update1_cluster_edition.tgz 和 vasp.5.4.4.tar.gz 编译环境准备前期准备更新软件并安装一些必备库1234567sudo apt-get update # 更新软件包的源地址sudo apt-get upgrade # 升级已安装的所有软件包sudo apt-get install build-essentialsudo apt-get install libstdc++5sudo apt-get install openjdk-8-jresudo apt-get install g++sudo apt-get install gcc 安装Intel编译环境解压安装包1tar –xvzf parallel_studio_xe_2019_update1_cluster_edition.tgz 进入安装包目录进行安装1./install.sh 空格+回车，按照默认操作进行，安装完成程序自动退出 设置环境变量在主文件夹 home 中按ctrl+h，显示隐藏文件夹，打开 .bashrc ，在其末尾添加（注意安装后的 intel 目录，有的是 /opt/intel ） 12source /home/cyh/intel/bin/compilervars.sh intel64 # 启用intel编译器source /home/cyh/intel/mkl/bin/mklvars.sh intel64 # 启用mkl编译器 退出并保存 .bashrc 。再使其生效 1source ~/.bashrc 检查是否编译成功 1234which ifortwhich iccwhich mpiecho $MKLROOT 显示路径即编译成功 编译Intel fftw3进入 intel 目录中的 fftw3xf 文件夹内 /home/cyh/intel/mkl/interfaces/fftw3xf 1make libintel64 生成 libfftw3.intel.a 编译VASP解压安装包1tar –xvzf vasp.5.4.4.tar.gz 将解压后的 vasp.5.4.4 文件夹移动到 home 文件夹中 获取 makefile 文件进入 /home/vasp.5.4.4/arch ,复制 makefile.include.linux_intel 到上一级目录 /home/vasp.5.4.4 中，并重命名为 makefile.include 获取管理员权限在 /home/vasp.5.4.4 中打开终端 1su 确认环境变量12source /home/cyh/intel/bin/compilervars.sh intel64source /home/cyh/intel/mkl/bin/mklvars.sh intel64 进行编译12make verycleanmake all 编译完成后在 /home/vasp.5.4.4/bin 中生成 vasp_gam, vasp_ncl 和 vasp_std 添加环境变量打开 .bashrc ，在其末尾添加 1export PATH=/home/cyh/vasp.5.4.4/bin:$PATH 退出并保存 .bashrc 。再使其生效 1source ~/.bashrc]]></content>
  </entry>
  <entry>
    <title><![CDATA[上传文章的步骤]]></title>
    <url>%2F2019%2F10%2F18%2Fupload%2F</url>
    <content type="text"><![CDATA[在myblog文件夹中右键 “Git Bash Here” 生成新文章1$ hexo new "My New Post" 在\myblog\source_posts中出现 “My-New-Post.md” 编辑.md文件(atom中使用快捷键Shift + Ctrl + M进行预览) 生成静态HTML文件1$ hexo generate 查看效果1$ hexo server 发布文章12$ hexo clean #修改文章时需要$ hexo deploy]]></content>
  </entry>
</search>
